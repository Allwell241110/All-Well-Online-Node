<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= title %></title>
  <style>
    * { box-sizing: border-box; }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 40px 20px;
      background-color: #f9f9f9;
      color: #333;
    }

    h1 {
      text-align: center;
      margin-bottom: 30px;
      font-size: 2rem;
      color: #222;
    }

    form {
      background-color: #fff;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
      max-width: 700px;
      margin: auto;
    }

    label {
      display: block;
      margin-bottom: 6px;
      font-weight: 600;
      color: #555;
    }

    input[type="text"],
    input[type="number"],
    textarea,
    input[type="file"] {
      width: 100%;
      padding: 12px;
      margin-bottom: 18px;
      border-radius: 6px;
      border: 1px solid #ccc;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    input:focus, textarea:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    }

    textarea {
      min-height: 100px;
      resize: vertical;
    }

    button {
      display: block;
      width: 100%;
      padding: 14px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #43a047;
    }

    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-bottom: 20px;
    }

    .preview-image {
      position: relative;
      width: 100px;
      height: 100px;
      border: 1px solid #ddd;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      background-color: #fff;
      cursor: move;
      transition: transform 0.2s ease;
    }

    .preview-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .remove-btn {
      position: absolute;
      top: 6px;
      right: 6px;
      width: 24px;
      height: 24px;
      background-color: rgba(255, 0, 0, 0.85);
      color: white;
      border: none;
      border-radius: 50%;
      font-size: 18px;
      font-weight: bold;
      line-height: 24px;
      text-align: center;
      cursor: pointer;
    }

    .remove-btn:hover {
      background-color: #c62828;
    }

    .preview-image.dragging {
      opacity: 0.5;
      transform: scale(0.95);
    }

    .drag-over {
      border: 2px dashed #aaa;
      background-color: #f0f0f0;
    }

    @media (max-width: 600px) {
      form { padding: 20px; }
      .preview-image {
        width: 80px;
        height: 80px;
      }
    }

    #loading {
      display: none;
      text-align: center;
      margin-top: 20px;
    }

    #loading div {
      display: inline-block;
      border: 6px solid #f3f3f3;
      border-top: 6px solid #4CAF50;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    #message {
      display: none;
      text-align: center;
      margin-top: 20px;
      font-weight: bold;
      color: green;
    }
  </style>
</head>
<body>

<h1>Create a New Product</h1>

<form id="productForm" action="/api/products" method="POST" enctype="multipart/form-data">
  <div><label for="name">Product Name:</label><input type="text" id="name" name="name" required /></div>
  <div><label for="description">Product Description:</label><textarea id="description" name="description" required></textarea></div>
  <div><label for="price">Price:</label><input type="number" id="price" name="price" required /></div>
  <div><label for="salePrice">Sale Price (optional):</label><input type="number" id="salePrice" name="salePrice" /></div>
  <div><label for="brand">Brand:</label><input type="text" id="brand" name="brand" required /></div>
  <div><label for="category">Category:</label><input type="text" id="category" name="category" required /></div>
  <div><label for="stock">Stock Quantity:</label><input type="number" id="stock" name="stock" required /></div>

  <div>
    <label for="images">Product Images:</label>
    <div class="preview-container" id="previewContainer"></div>
    <input type="file" id="images" name="images" accept="image/*" multiple />
  </div>

  <button id="submit-button" type="submit">Create Product</button>
</form>

<div id="loading"><div></div><p>Submitting, please wait...</p></div>
<div id="message"></div>

<script>
  const imageInput = document.getElementById('images');
  const previewContainer = document.getElementById('previewContainer');
  const form = document.getElementById('productForm');
  const loadingDiv = document.getElementById('loading');
  const submitButton = document.getElementById('submit-button');
  const message = document.getElementById('message');

  let selectedFiles = [];

  imageInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    selectedFiles = [...selectedFiles, ...files];
    updatePreviews();
  });

  function updatePreviews() {
    previewContainer.innerHTML = '';
    selectedFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'preview-image';
        wrapper.setAttribute('draggable', true);
        wrapper.dataset.index = index;

        wrapper.innerHTML = `
          <button class="remove-btn">&times;</button>
          <img src="${e.target.result}" alt="Preview">
        `;

        wrapper.querySelector('.remove-btn').onclick = () => {
          selectedFiles.splice(index, 1);
          updatePreviews();
        };

        addDragEvents(wrapper);
        previewContainer.appendChild(wrapper);
      };
      reader.readAsDataURL(file);
    });
  }

  function addDragEvents(elem) {
    elem.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', elem.dataset.index);
      elem.classList.add('dragging');
    });

    elem.addEventListener('dragend', () => {
      elem.classList.remove('dragging');
    });

    elem.addEventListener('dragover', (e) => {
      e.preventDefault();
      elem.classList.add('drag-over');
    });

    elem.addEventListener('dragleave', () => {
      elem.classList.remove('drag-over');
    });

    elem.addEventListener('drop', (e) => {
      e.preventDefault();
      const fromIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);
      const toIndex = parseInt(elem.dataset.index, 10);
      if (fromIndex !== toIndex) {
        const moved = selectedFiles.splice(fromIndex, 1)[0];
        selectedFiles.splice(toIndex, 0, moved);
        updatePreviews();
      }
    });
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    loadingDiv.style.display = 'block';
    submitButton.disabled = true;

    const formData = new FormData(form);
    selectedFiles.forEach(file => formData.append('images', file));

    try {
      const res = await fetch(form.action, {
        method: 'POST',
        body: formData
      });

      const data = await res.json();

      if (res.ok) {
        message.textContent = 'Product created successfully!';
        message.style.color = 'green';
        message.style.display = 'block';
        form.reset();
        selectedFiles = [];
        updatePreviews();
      } else {
        message.textContent = 'Failed to submit product.';
        message.style.color = 'red';
        message.style.display = 'block';
      }

      setTimeout(() => {
        message.style.display = 'none';
      }, 3000);

    } catch (err) {
      alert('Network error. Please try again.');
    } finally {
      loadingDiv.style.display = 'none';
      submitButton.disabled = false;
    }
  });
</script>

</body>
</html>