<div class="add-product-form">
  <div>
    <h1><%= product ? 'Edit Product' : 'Create a New Product' %></h1>
    <form id="productForm">

      <!-- Hidden product ID (for edit mode) -->
      <input type="hidden" id="productId" name="productId" value="<%= product?._id || '' %>" />

      <!-- Image Uploader Partial -->
      <%- include('../partials/products/imageUploader', { images: product?.images || [] }) %>

      <!-- Category Selector Partial -->
      <%- include('../partials/categories/select', {
        metaCategories,
        mainCategories,
        subCategories,
        selectedSubCategoryId: product?.subCategory?._id || ''
      }) %>

      <div>
        <label for="name">Product Name:</label>
        <input type="text" id="name" name="name" value="<%= product?.name || '' %>" required />
      </div>

      <div>
        <label for="description">Product Description:</label>
        <textarea id="description" name="description" required><%= product?.description || '' %></textarea>
      </div>

      <div>
        <label for="price">Price:</label>
        <input type="number" id="price" name="price" value="<%= product?.price || '' %>" required />
      </div>

      <div>
        <label for="salePrice">Sale Price (optional):</label>
        <input type="number" id="salePrice" name="salePrice" value="<%= product?.salePrice || '' %>" />
      </div>

      <div>
        <label for="brand">Brand:</label>
        <input type="text" id="brand" name="brand" value="<%= product?.brand || '' %>" required />
      </div>

      <div>
        <label for="stock">Stock Quantity:</label>
        <input type="number" id="stock" name="stock" value="<%= product?.stock || '' %>" required />
      </div>

      <!-- Variant Partial -->
      <%- include('../partials/products/variants', { variants: product?.variants || [] }) %>

      <button id="submit-button" type="submit">
        <%= product ? 'Update Product' : 'Create Product' %>
      </button>
    </form>
  </div>
</div>

<script>
document.getElementById('productForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const submitButton = document.getElementById('submit-button');
  submitButton.disabled = true;

  const productId = document.getElementById('productId').value;
  const isEditMode = !!productId;

  const productName = document.getElementById('name').value.trim();
  const productDescription = document.getElementById('description').value.trim();
  const productPrice = document.getElementById('price').value;
  const productSalePrice = document.getElementById('salePrice').value;
  const productBrand = document.getElementById('brand').value.trim();
  const productStock = document.getElementById('stock').value;

  const errors = [];

  if (!productName) errors.push('Product name is required.');
  if (!productDescription) errors.push('Product description is required.');
  if (!productPrice) errors.push('Product price is required.');
  if (!productBrand) errors.push('Product brand is required.');
  if (!productStock) errors.push('Stock quantity is required.');
  if (!Array.isArray(window.selectedImages) || window.selectedImages.length === 0) {
    errors.push('At least one product image is required.');
  }

  if (errors.length > 0) {
    alert('Please fix the following errors:\n\n' + errors.join('\n'));
    submitButton.disabled = false;
    return;
  }

  function collectVariants() {
    const variantGroups = document.querySelectorAll('.variant-group');
    const variants = [];
    window.variantImageMap = {};

    variantGroups.forEach((group, index) => {
      const nameInput = group.querySelector('input[name*="[name]"]');
      const priceInput = group.querySelector('input[name*="[price]"]');
      const imageInput = group.querySelector('input[name*="[image]"]');

      const name = nameInput?.value.trim();
      const price = priceInput ? parseFloat(priceInput.value) || 0 : 0;
      const file = imageInput?.files[0];

      if (price || file) {
        if (!name) {
          throw new Error(`Variant name is required if price or image is provided (Variant #${index + 1}).`);
        }
      }

      if (name) {
        variants.push({
          name,
          priceAdjustment: price,
          imageField: file ? `variantImage_${index}` : null
        });

        if (file) {
          window.variantImageMap[`variantImage_${index}`] = file;
        }
      }
    });

    window.variants = variants;
  }

  try {
    await collectVariants();
  } catch (err) {
    alert(err.message || 'Error while processing variants.');
    submitButton.disabled = false;
    return;
  }

  const formData = new FormData();
  formData.append('productName', productName);
  formData.append('productDescription', productDescription);
  formData.append('productPrice', productPrice);
  formData.append('productSalePrice', productSalePrice);
  formData.append('productBrand', productBrand);
  formData.append('productStock', productStock);
  formData.append('subCatId', window.subCatId || '');
  formData.append('variants', JSON.stringify(window.variants || []));

  window.selectedImages.forEach(file => {
    formData.append('images', file);
  });

  for (const [fieldName, file] of Object.entries(window.variantImageMap)) {
    formData.append(fieldName, file);
  }

  try {
    const res = await fetch(isEditMode ? `/products/${productId}` : '/products', {
      method: isEditMode ? 'PUT' : 'POST',
      body: formData
    });

    const result = await res.json();
    if (res.ok) {
      alert(isEditMode ? 'Product updated successfully!' : 'Product uploaded successfully!');
      window.location.href = '/products';
    } else {
      throw new Error(result.message || 'Operation failed.');
    }
  } catch (err) {
    alert('Error: ' + (err.message || 'Something went wrong.'));
  } finally {
    submitButton.disabled = false;
  }
});
</script>